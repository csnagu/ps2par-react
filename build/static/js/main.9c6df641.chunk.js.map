{"version":3,"sources":["decoder.ts","Converter.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["deconv","raw_text","strin","toUpperCase","strout","tansaku","fix","str","nmode","chr","val","f","dtkind","err","i","length","charAt","j","convert_num","str1","ret","b1","Array","b2","bxor","parseInt","substr","toString","Converter","props","handleCahnge","event","setState","raw","target","value","handleSubmit","decode","state","preventDefault","convert","className","onSubmit","this","htmlFor","id","onChange","readOnly","type","React","Component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9c6df641.chunk.js","sourcesContent":["export const deconv = (raw_text: string): string => {\n  const strin = raw_text.toUpperCase();\n  let str1: string = \"\";\n  const strout = tansaku(strin, 1);\n  str1 = fix(strout);\n  return str1;\n};\n\nconst tansaku = (str: string, nmode: number): string => {\n  let val = \"\";\n  let f = 0;\n  let chr;\n  let dtkind = 0;\n  let err = 0;\n  let strout = \"\";\n\n  for (let i = 0; i < str.length; i++) {\n    chr = str.charAt(i);\n    if ((chr >= \"\\x30\" && chr <= \"\\x39\") || (chr >= \"\\x41\" && chr <= \"\\x46\")) {\n      if (f < 8 && dtkind < 2) {\n        f++;\n        val += chr;\n      }\n    } else if (chr === \"\\x20\" || chr === \"\\x0d\" || chr === \"\\x0a\") {\n      if (f > 0) {\n        for (let j = f; j < 8; j++) {\n          val = \"0\" + val;\n        }\n        strout += convert_num(val, dtkind, nmode);\n        if (chr === \"\\x20\" && dtkind === 0) {\n          dtkind++;\n        } else {\n          dtkind = 0;\n        }\n        val = \"\";\n        strout += chr;\n        f = 0;\n      }\n    } else {\n      err = 1;\n      break;\n    }\n  }\n\n  if (err === 0 && f > 0) {\n    for (let j = f; j < 8; j++) {\n      val = \"0\" + val;\n    }\n    strout += convert_num(val, dtkind, nmode);\n  }\n  return strout;\n};\n\nconst fix = (str: string): string => {\n  var i;\n  var chr;\n  let str1: string = \"\";\n\n  for (i = 0; i < str.length; i++) {\n    chr = str.charAt(i);\n    if (i % 18 === 0) {\n      str1 += \"patch=1,EE,0\";\n    } else if (chr === \" \") {\n      str1 += \",word,\";\n    } else {\n      str1 += chr.toUpperCase();\n    }\n  }\n\n  return str1;\n};\n\nconst convert_num = (val: string, dtkind: number, nmode: number): string => {\n  let i;\n  let ret = \"\";\n\n  const b1 = new Array(3);\n  const b2 = new Array(3);\n  let bxor = null;\n\n  if (dtkind === 0) {\n    bxor = [0xa6, 0x96, 0x01, 0x82];\n  } else {\n    bxor = [0xd9, 0x3b, 0x1b, 0xcc];\n  }\n\n  for (i = 0; i < 4; i++) {\n    b1[i] = parseInt(val.substr(i * 2, 2), 16);\n    if (nmode === 0) {\n      b2[i] = b1[i] ^ bxor[i];\n      b2[i] += bxor[(i + 1) & 3];\n      b2[i] &= 0xff;\n    } else {\n      b1[i] += 256 - bxor[(i + 1) & 3];\n      b1[i] &= 0xff;\n      b2[i] = b1[i] ^ bxor[i];\n    }\n    if (b2[i] < 16) {\n      ret += \"0\";\n    }\n    ret += b2[i].toString(16);\n  }\n  return ret;\n};\n","import React from \"react\";\nimport { deconv } from \"./decoder\";\n\ninterface ConverterState {\n  raw: string;\n  decode: string;\n}\n\nexport default class Converter extends React.Component<{}, ConverterState> {\n  constructor(props: any) {\n    super(props);\n    this.state = { raw: \"\", decode: \"\" };\n  }\n\n  handleCahnge = (event: React.ChangeEvent) => {\n    this.setState({ raw: (event.target as HTMLInputElement).value });\n  };\n\n  handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n    this.setState({ decode: deconv(this.state.raw) });\n    event.preventDefault();\n  };\n\n  convert = (raw_text: string): string => {\n    return raw_text + \"test\";\n  };\n\n  render() {\n    return (\n      <form className=\"Converter-form\" onSubmit={this.handleSubmit}>\n        <div className=\"Converter-container\">\n          <label className=\"Converter-label\" htmlFor=\"raw_area\">\n            Raw\n          </label>\n          <label className=\"Converter-label\" htmlFor=\"decode_area\">\n            Decode\n          </label>\n          <textarea\n            id=\"raw_area\"\n            className=\"Converter-codespace\"\n            value={this.state.raw}\n            onChange={this.handleCahnge}\n          />\n          <textarea\n            id=\"decode_area\"\n            className=\"Converter-codespace\"\n            value={this.state.decode}\n            readOnly\n          />\n        </div>\n        <input className=\"Converter-button\" type=\"submit\" value=\"Decode\" />\n      </form>\n    );\n  }\n}\n","import React from \"react\";\nimport \"./App.css\";\nimport Converter from \"./Converter\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <article className=\"App-header\">\n        <Converter />\n      </article>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}